<!DOCTYPE html>
<html ng-app="app">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="description" content="">
    <meta name="author" content="rt-inconnect">
        
    <title>Bulletin</title>

    <!-- Viewport mobile tag for sensible mobile support -->

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" async>

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/angular-motion.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/paper.css">
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/textAngular.css">
    <!--STYLES END-->

    <script type="text/javascript">
        var date = false;
        <% if (req.param('date')) { %>
            date = new Date(Date.parse('<%- req.param('date') || false %>'));
        <% } %>
    </script>

  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <script src="http://code.highcharts.com/adapters/standalone-framework.js"></script>
    <script src="http://code.highcharts.com/highcharts.src.js"></script>
    <!--SCRIPTS-->
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/angular-animate.js"></script>
    <script src="/js/dependencies/angular-file-upload.js"></script>
    <script src="/js/dependencies/angular-sanitize.js"></script>
    <script src="/js/dependencies/angular-strap.js"></script>
    <script src="/js/dependencies/angular-strap.tpl.js"></script>
    <script src="/js/dependencies/highcharts-ng.js"></script>
    <script src="/js/dependencies/textAngular-rangy.min.js"></script>
    <script src="/js/dependencies/textAngular-sanitize.js"></script>
    <script src="/js/dependencies/textAngular.js"></script>
    <script src="/js/dependencies/textAngularSetup.js"></script>
    <script src="/js/app/app.js"></script>
    <script src="/js/app/module.basin.js"></script>
    <script src="/js/app/module.bulletin.js"></script>
    <script src="/js/app/module.category.js"></script>
    <script src="/js/app/module.chart.js"></script>
    <script src="/js/app/module.config.js"></script>
    <script src="/js/app/module.constant.js"></script>
    <script src="/js/app/module.data.js"></script>
    <script src="/js/app/module.export.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
